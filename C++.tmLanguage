<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<!-------------------------------------------
	File Type Support
------------------------------------------->
	<key>fileTypes</key>
	<array>
<!-------------------------------------------
	C++ File Type Support
------------------------------------------->
		<string>cpp</string>
		<string>cc</string>
		<string>cp</string>
		<string>cxx</string>
		<string>c++</string>
		<string>C</string>
		<string>h</string>
		<string>hh</string>
		<string>hpp</string>
		<string>hxx</string>
		<string>h++</string>
		<string>inl</string>
		<string>ipp</string>
	</array>
	<key>firstLineMatch</key>
	<string>-\*- C\+\+ -\*-</string>
	<key>foldingStartMarker</key>
	<string>(?x)
		 /\*\*(?!\*)
		|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
	</string>
	<key>foldingStopMarker</key>
	<string>(?&lt;!\*)\*\*/|^\s*\}</string>
	<key>keyEquivalent</key>
	<string>^~C</string>
<!-----------------------------------------
	Display Syntax As
------------------------------------------->
	<key>name</key>
	<string>Beelzzebub C++</string>
	<key>patterns</key>
	<array>
<!---------------------------------------------------
	Includes (from repositories) - CCpp
--------------------------------------------------->
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-enabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-disabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-other</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#pragma-mark</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#disabled</string>
		</dict>
<!----------------------------------------
	Raw String (exception)- CCpp
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>(R|Ru|RU|uR|UR)(\"\+\*\()\.*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>prefix</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>begin</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\)\+\*\")</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>end</string>
				</dict>
			</dict>
			<key>name</key>
			<string>raw.string.ccpp</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
<!----------------------------------------
	Raw String - CCpp
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>(R|Ru|RU|uR|UR)(\"\()\.*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>prefix</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>begin</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\)\")</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>end</string>
				</dict>
			</dict>
			<key>name</key>
			<string>raw.string.ccpp</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
<!----------------------------------------
	Member Initializer - CCpp
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>(?&lt;!\:)(\:)\s*(\w+\(\w+\))+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>begin</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\{</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>open.curly.bracket.block</string>
				</dict>
			</dict>
			<key>name</key>
			<string>member.initializer</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
<!--------------------------------------
	Keyword Control - C
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\b</string>
			<key>name</key>
			<string>keyword.control.c</string>
		</dict>
<!--------------------------------------
	Keyword Control - C++
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(catch|operator|try|throw|using|namespace)\b</string>
			<key>name</key>
			<string>keyword.control.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bdelete\b(\s*\[\])?|\bnew\b(?!])</string>
			<key>name</key>
			<string>keyword.control.c++</string>
		</dict>
<!--------------------------------------
	Keyword Control - Beelzebub
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(with(?:Interrupts|Lock(?:Simple|Static)?)?|__try|__catch)\b</string>
			<key>name</key>
			<string>keyword.control.beelzebub</string>
		</dict>
<!--------------------------------------
	Keyword Operator - C++
	vModification: Moved all of them to the correct categories.
	Added `typedef`.
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(?:typedef|typeid)\b</string>
			<key>name</key>
			<string>keyword.operator.c++</string>
		</dict>
<!--------------------------------------
	Keyword Operator Cast - C++
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\b\s*</string>
			<key>name</key>
			<string>keyword.operator.cast.c++</string>
		</dict>
<!--------------------------------------
	Beelzebub Debug Macros
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(?:assert(?:_or)?|msg_?|breakpoint)\b\s*</string>
			<key>name</key>
			<string>keyword.operator.debug.beelzebub.c++</string>
		</dict>
<!--------------------------------------
	Beelzebub Debug Macros - STRONG
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(?:ASSERT(?:_(?:N?EQ))?|MSG_?)\b\s*</string>
			<key>name</key>
			<string>keyword.operator.debug.strong.beelzebub.c++</string>
		</dict>
<!--------------------------------------
	Beelzebub Keyword Macros
	+ sizeof
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(__bland|__cold|__hot|__noreturn|__returns_twice|__used|__unused|__must_check|__unreachable_code|__prefetch|__packed|__align(?:of|ed(?:_nat)?)|(?:__)?sizeof|__build_data|__fastcall(?:_ia32)|(?:un)?likely|__returns_nonnull|__malloc)\b\s*</string>
			<key>name</key>
			<string>keyword.operator.macros.beelzebub</string>
		</dict>
<!--------------------------------------
	GCC attribute syntax
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(__attribute(?:__)?|__always_inline__|__noinline__|__const__|__cold__|__hot__|__noreturn__|__returns_twice__|__returns_nonnull__|__malloc__|__used__|__unused__|__warn_unused_result__|__packed__|__section__|__fastcall__|__target__)\b</string>
			<key>name</key>
			<string>keyword.operator.attribute.gcc</string>
		</dict>
<!--------------------------------------
	This keyword
---------------------------------------->
<!--		<dict>
			<key>match</key>
			<string>\bthis\b\s*</string>
			<key>name</key>
			<string>keyword.operator.this.c++</string>
		</dict>
<!--------------------------------------
	Storage Type - C
	vModification: Removed `struct`, `string` and `typedef`.
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|union|unsigned|void)\b</string>
			<key>name</key>
			<string>storage.type.c</string>
		</dict>
<!--------------------------------------
	Storage Type - C++
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(class|wchar_t|nullptr_t)\b</string>
			<key>name</key>
			<string>storage.type.c++</string>
		</dict>
<!--------------------------------------
	Beelzebub Integer Types
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(Handle|HandleType|HandleResult|(?:Object|Shard)Allocator(?:Smp)?|(?:ObjectPool|Slab)(?:Smp|Base)|MemoryManager|PageAllocator|PageAllocationSpace|PageDescriptor|Thread|Process|TerminalBase|SerialTerminal|VbeTerminal|TerminalCoordinates|TerminalWriteResult|TerminalDescriptor|Spinlock|SmpBarrier|SpinlockUninterruptible|SerialPort|ManagedSerialPort|IsrState|Cpu|Domain|Lapic|Gdt(?:Register|EntryShort|Tss64Entry)|Idt(?:Register|Gate(?:Type)?)|InterruptGuard|LockGuard(?:Simple|Flexible)?|Vmm(?:Arc)?|Exception(?:Guard|Context)?|Image(?:s|Type|Role)?)\b</string>
			<key>name</key>
			<string>storage.type.classes.beelzebub</string>
		</dict>
<!--------------------------------------
	Beelzebub Classes
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(?:[pv](?:addr|size)_t|pgind_t|comp_t|creg_t|seg_t|s?byte|int_cookie_t|spinlock_t|Atomic|(?:Atomic)?[SU]?Int(?:8|16|32|64|Ptr)|Atomic(?:Float|Single|Double|Bool|Size|PtrDiff)|obj_ind_t)\b</string>
			<key>name</key>
			<string>storage.type.integers.beelzebub</string>
		</dict>
<!-----------------------------------------
	Storage Type - C++11
	Modified; added a few, shortened a few.
	Supports all types mentioned here: http://en.cppreference.com/w/cpp/types/integer
------------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(u?int(?:ptr|max|(?:_fast|_least)?(?:8|16|32|64|128))_t|ptrdiff_t|s?size_t|char(?:16|32)_t)\b</string>
			<key>name</key>
			<string>storage.type.c++11</string>
		</dict>
<!--------------------------------------
	Storage Type Template - C++
	vModification: Added `struct` and `class`.
	Also changed the name.
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(?:template|struct|class)\b\s*</string>
			<key>name</key>
			<string>keyword.storage.c++</string>
		</dict>
<!--------------------------------------
	Storage Modifier - C
	Modified for Beelzebub.
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b((?:__)?const|(?:__)?extern|register|(?:__)?restrict|static|volatile|(?:__force|__no)?inline)\b</string>
			<key>name</key>
			<string>storage.modifier.c</string>
		</dict>
<!--------------------------------------
	Storage Modifier - C++
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(export|mutable|typename)\b</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(friend|explicit|virtual)\b</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(private|protected|public)\b\s*\:</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(private|protected|public)\b</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(export|mutable|typename)\b</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>
<!-----------------------------------------
	Storage Modifier - C++11
------------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(constexpr|auto)\b</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(override|final|noexcept)\b</string>
			<key>name</key>
			<string>storage.modifier.c++</string>
		</dict>

<!-----------------------------------------------
	Constant Other Variable Mac Classic C - C
------------------------------------------------>
		<dict>
			<key>comment</key>
			<string>common C constant naming idiom -- kConstantVariable</string>
			<key>match</key>
			<string>\bk[A-Z]\w*\b</string>
			<key>name</key>
			<string>constant.other.variable.mac-classic.c</string>
		</dict>
<!------------------------------------------------------
	Variable Other Readwrite Global Mac Classic C - C
------------------------------------------------------->
		<dict>
			<key>match</key>
			<string>\bg[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.global.mac-classic.c</string>
		</dict>
<!---------------------------------------------------------
	Variable Other Readwrite Static Mac Classic C - C
--------------------------------------------------------->
		<dict>
			<key>match</key>
			<string>\bs[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.static.mac-classic.c</string>
		</dict>
<!-------------------------------------------
	Variable Other Readwrite Member - C++
--------------------------------------------->
		<dict>
			<key>comment</key>
			<string>common C++ instance var naming idiom -- fMemberName</string>
			<key>match</key>
			<string>\b(f|m)[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.member.c++</string>
		</dict>
<!----------------------------
	Variable Language - C++
----------------------------->
		<dict>
			<key>match</key>
			<string>\bthis\b</string>
			<key>name</key>
			<string>variable.language.c++</string>
		</dict>
<!----------------------------
	Beelzebub Variables
----------------------------->
		<dict>
			<key>match</key>
			<string>\b(?:PageSize|MainTerminal|DebugTerminal|MainPageAllocator)\b</string>
			<key>name</key>
			<string>variable.beelzebub</string>
		</dict>
<!--------------------------------------
	Constant Language - C
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b(NULL|true|false|TRUE|FALSE)\b</string>
			<key>name</key>
			<string>constant.language.c</string>
		</dict>
<!-----------------------------
	Constant Language - C++
-------------------------------->
		<dict>
			<key>match</key>
			<string>\b(nullptr|nullpaddr|nullvaddr)\b</string>
			<key>name</key>
			<string>constant.language.c++</string>
		</dict>
<!--------------------------------------
	Constant Numeric - C
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
			<key>name</key>
			<string>constant.numeric.c</string>
		</dict>

<!--------------------------------------
	vNote: a lot of useless types were removed jere.
---------------------------------------->

<!---------------------------------------------------
	Pointer - CCpp
----------------------------------------------------->
		<dict>
			<key>match</key>
			<string>\w+\:\:\w+\*</string>
			<key>name</key>
			<string>pointer.ccpp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\*\(\w+\)</string>
			<key>name</key>
			<string>pointer.ccpp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\(\w+\)\*</string>
			<key>name</key>
			<string>pointer.ccpp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\w+\*</string>
			<key>name</key>
			<string>pointer.ccpp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\*\w+</string>
			<key>name</key>
			<string>pointer.ccpp</string>
		</dict>
<!---------------------------------------------------
	Address - CCpp
----------------------------------------------------->
		<dict>
			<key>match</key>
			<string>\&\w+</string>
			<key>name</key>
			<string>address.ccpp</string>
		</dict>
<!---------------------------------------------------
	Array - CCpp
----------------------------------------------------->
		<dict>
			<key>match</key>
			<string>\w+(?=\[)</string>
			<key>name</key>
			<string>array.ccpp</string>
		</dict>
<!---------------------------------------------------
	Function Support - CCpp
----------------------------------------------------->
		<dict>
			<key>match</key>
			<string>(?&lt;=class|wchar_t|nullptr_t)\s\w+</string>
			<key>name</key>
			<string>meta.class-struct.c++ entity.name.type.c++</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\w+\s*(?=\()</string>
			<key>name</key>
			<string>meta.function.c entity.name.function.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=\.|\-&gt;)\w+(?=[^\w]|\.|\-&gt;)</string>
			<key>name</key>
			<string>meta.function.c meta.block.c meta.function-call.c support.function.any-method.c</string>
		</dict>
		<!--<dict>
			<key>match</key>
			<string>(?&lt;=\:\:)\w+</string>
			<key>name</key>
			<string>meta.function.c entity.name.function.c</string>
		</dict><!-- -->
		<dict>
			<key>match</key>
			<string>\w+\:\:</string>
			<key>name</key>
			<string>meta.function.c entity.name.function.c</string>
		</dict>
<!--------------------------------------
	Borrowed from the vanila C++ syntax!
---------------------------------------
		<dict>
			<key>angle_brackets</key>
			<dict>
				<key>begin</key>
				<string>&lt;</string>
				<key>end</key>
				<string>&gt;</string>
				<key>name</key>
				<string>meta.angle-brackets.c++</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#angle_brackets</string>
					</dict>
					<dict>
						<key>include</key>
						<string>$base</string>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(class|struct)\s+([_A-Za-z][_A-Za-z0-9]*\b);</string>
			<key>name</key>
			<string>meta.class-struct-block.c++</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.forward-decl.c++</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(class|struct)\s+([_A-Za-z][_A-Za-z0-9]*\b)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.c++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})|(?=(;|,|\(|\)|&gt;|\[|\]))</string>
			<key>name</key>
			<string>meta.class-struct-block.c++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#angle_brackets</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!:):(?!:)</string>
					<key>end</key>
					<string>(?=\{)</string>
					<key>name</key>
					<string>meta.class-struct-block.base-classes.c++</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(private|protected|public|virtual)</string>
							<key>name</key>
							<string>storage.modifier.c++</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>[_A-Za-z][_A-Za-z0-9]*\b</string>
							<key>end</key>
							<string>,|(?=\{)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#angle_brackets</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.scope.c++</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})(\s*\n)?</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.invalid.c++</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.you-forgot-semicolon.c++</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#special_block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#constructor</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<!--<dict>
			<key>match</key>
			<string>\:\:\w+</string>
			<key>name</key>
			<string>meta.function.c entity.name.function.c</string>
		</dict><!-- -->
<!--------------------------------------
	Logical Operator - CCpp
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\+\=|\-\=|\*\=|\/\=|\%\=|\&amp;\=|and_eq|\|\=|or_eq|\^\=|xor_eq|\&lt;\&lt;\=|\&gt;\&gt;\=</string>
			<key>name</key>
			<string>keyword.operator.compound.ccpp</string>
		</dict>
<!--------------------------------------
	Logical Operator - CCpp
	vModification: Removed the `&lt;` from the ! operator.
	It doesn't really belong there!
	Also, `.` is now `[^\=]`. This stops `!=` from being
	identified as a logical operator followed by an assignment
	operator.
	Moreover, operator synonyms belong here.
---------------------------------------->
		<dict>
			<key>match</key>
			<string>!(?=[^\=])|\bnot\b</string>
			<key>name</key>
			<string>keyword.operator.logical.ccpp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\&amp;\&amp;|\band\b|\|\||\bor\b</string>
			<key>name</key>
			<string>keyword.operator.logical.ccpp</string>
		</dict>
<!--------------------------------------
	Bitwise Operator - CCpp
---------------------------------------->
		<dict>
			<key>match</key>
			<string>(?:~|\bcompl\b)(?&lt;=.)</string>
			<key>name</key>
			<string>keyword.operator.bitwise.ccpp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\&amp;|\bbitand\b|\||\bbitor\b|\^|\bxor\b|\&lt;\&lt;|\&gt;\&gt;</string>
			<key>name</key>
			<string>keyword.operator.bitwise.ccpp</string>
		</dict>
<!--------------------------------------
	Comparison Operator - CCpp
---------------------------------------->
		<dict>
			<key>match</key>
			<string>\&gt;\=</string>
			<key>name</key>
			<string>keyword.operator.comparison.ccpp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\&lt;\=</string>
			<key>name</key>
			<string>keyword.operator.comparison.ccpp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\=\=|\!\=|\bnot_eq\b|\&lt;|\&gt;</string>
			<key>name</key>
			<string>keyword.operator.comparison.ccpp</string>
		</dict>
<!----------------------------------------
	Arithmetic operators - CCpp
------------------------------------------>
		<dict>
			<key>match</key>
			<string>\+|\-|\*|\/|\%</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.ccpp</string>
		</dict>
<!----------------------------------------
	Assignment operator - CCpp
------------------------------------------>
		<dict>
			<key>match</key>
			<string>\=</string>
			<key>name</key>
			<string>keyword.operator.assignment.ccpp</string>
		</dict>
<!------------------------------------------
	Curly Brackets (exceptions)- CCpp
-------------------------------------------->
				<dict>
					<key>match</key>
					<string>(?&lt;=\s)\}(?=break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)</string>
					<key>name</key>
					<string>open.curly.bracket.block.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\}(?=[^\;\s\r\n])</string>
					<key>name</key>
					<string>close.curly.bracket.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[^\s\r\n])\s*\}</string>
					<key>name</key>
					<string>close.curly.bracket.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\{(?=(\s*|\t*)\/\/\s*.*(\r|\n))</string>
					<key>name</key>
					<string>open.curly.bracket.block.ccpp</string>
				</dict>
<!------------------------------------------
	Curly Brackets Block - CCpp
-------------------------------------------->
				<dict>
					<key>match</key>
					<string>\{(?=(\s*|\t*)(\r|\n))</string>
					<key>name</key>
					<string>open.curly.bracket.block.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\s)\}(?=\;?)</string>
					<key>name</key>
					<string>close.curly.bracket.block.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^\}</string>
					<key>name</key>
					<string>close.curly.bracket.block.ccpp</string>
				</dict>
<!------------------------------------------
	Curly Brackets - CCpp
-------------------------------------------->
				<dict>
					<key>match</key>
					<string>\{</string>
					<key>name</key>
					<string>open.curly.bracket.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\}</string>
					<key>name</key>
					<string>close.curly.bracket.ccpp</string>
				</dict>
<!------------------------------------------
	Round Brackets - CCpp
-------------------------------------------->
				<dict>
					<key>match</key>
					<string>\(</string>
					<key>name</key>
					<string>open.round.bracket.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\)</string>
					<key>name</key>
					<string>close.round.bracket.ccpp</string>
				</dict>
<!------------------------------------------
	Angle Brackets - CCpp
-------------------------------------------->
				<dict>
					<key>match</key>
					<string>\[</string>
					<key>name</key>
					<string>open.angle.bracket.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\]</string>
					<key>name</key>
					<string>close.angle.bracket.ccpp</string>
				</dict>
<!---------------------------------------------------
	Period - CCpp
----------------------------------------------------->
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>period.ccpp</string>
				</dict>
<!---------------------------------------------------
	Coma - CCpp
----------------------------------------------------->
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>coma.ccpp</string>
				</dict>
<!---------------------------------------------------
	Semicolon End of Line (exceptions)- CCpp
----------------------------------------------------->
				<dict>
					<key>match</key>
					<string>\;(?=(\s*|\t*)\/\/\s*.*)</string>
					<key>name</key>
					<string>semi_colon.eol.ccpp</string>
				</dict>
<!---------------------------------------------------
	Semicolon End of Line - CCpp
----------------------------------------------------->
				<dict>
					<key>match</key>
					<string>\;(?=(\s*)(\r|\n))</string>
					<key>name</key>
					<string>semi_colon.eol.ccpp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\s*?\;\s*?$</string>
					<key>name</key>
					<string>semi_colon.eol.ccpp</string>
				</dict>
<!---------------------------------------------------
	Semicolon Block - CCpp
----------------------------------------------------->
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>semi_colon.ccpp</string>
				</dict>
<!--------------------------------------
	String Quoted Double - C
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>
<!--------------------------------------
	String Quoted Single - C
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
			</array>
		</dict>
<!--------------------------------------
	Meta Preprocessor Macro C - C
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>(?x)
				^\s*\#\s*(define)\s+             # define
				((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
				(?:                              # and optionally:
					(\()                         # an open parenthesis
						(
							\s* \g&lt;id&gt; \s*       # first argument
							((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
							(?:\.\.\.)?          # varargs ellipsis?
						)
					(\))                         # a close parenthesis
				)?
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.define.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.preprocessor.c</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.preprocessor.c</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.c</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|(?&lt;!\\)$</string>
			<key>name</key>
			<string>meta.preprocessor.macro.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
<!--------------------------------------
	Meta Preprocessor Diagnostic - C
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(error|warning)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.error.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.preprocessor.diagnostic.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
			</array>
		</dict>
<!--------------------------------------
	Meta Preprocessor Include - C
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(include|import)\b\s+</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.include.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.c.include</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.include.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>&lt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.lt-gt.include.c</string>
				</dict>
			</array>
		</dict>
<!--------------------------------------
	Meta Preprocessor - C
---------------------------------------->
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(define|elif|else|if|ifdef|ifndef|line|pragma|undef)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|(?&lt;!\\)$</string>
			<key>name</key>
			<string>meta.preprocessor.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
			</array>
		</dict>
	</array>
<!----------------------------------------------------------------------------
	C/C++ Native Features - End
----------------------------------------------------------------------------->
<!-------------------------------------------------------------------------
--
-- Here is the beginning of the repositories which could be include in
-- patterns.
--
--
--------------------------------------------------------------------------->
	<key>repository</key>
	<dict>
<!----------------------------------------------------------------------------
	C/C++ Native Features - Begin
----------------------------------------------------------------------------->
<!--------------------------------------
	Comments - C
---------------------------------------->
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.block.c</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
					<key>name</key>
					<string>comment.block.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*/.*\n</string>
					<key>name</key>
					<string>invalid.illegal.stray-comment-end.c</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line.c</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^// =(\s*.*?)\s*=\s*$\n?</string>
					<key>name</key>
					<string>comment.line.banner.c++</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.c++</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c++</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
<!------------------------------------------
	Constant Character Escape - C
--------------------------------------------->
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})</string>
					<key>name</key>
					<string>constant.character.escape.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.c</string>
				</dict>
			</array>
		</dict>
<!-------------------------------------------
	Constant Other Placeholder - C
							   - GCC Inline Assembly
							   - Beelzebub
---------------------------------------------->
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>%[zbhwkqlc]?(\d|\[[_a-zA-Z]\w*\])</string>
					<key>name</key>
					<string>constant.other.placeholder.gcc.asm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%([HcCsbBt#*n%]|[uixX][1248sSpP])</string>
					<key>name</key>
					<string>constant.other.placeholder.beelzebub.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)%
							(\d+\$)?                             # field (argument #)
							[#0\- +']*                           # flags
							[,;:_]?                              # separator character (AltiVec)
							((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
							(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
							(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
							[diouxXDOUeEfFgGaACcSspn%]           # conversion type
						</string>
					<key>name</key>
					<string>constant.other.placeholder.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%</string>
					<key>name</key>
					<string>invalid.illegal.placeholder.c</string>
				</dict>
			</array>
		</dict>
<!----------------------
	Disabled - C
------------------------->
		<key>disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*if(n?def)?\b.*$</string>
			<key>comment</key>
			<string>eat nested preprocessor if(def)s</string>
			<key>end</key>
			<string>^\s*#\s*endif\b</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#disabled</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pragma-mark</string>
				</dict>
			</array>
		</dict>
<!----------------------
	Pragma Mark - C
------------------------->
		<key>pragma-mark</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.pragma.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.toc-list.pragma-mark.c</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
			<key>name</key>
			<string>meta.section</string>
		</dict>
<!-------------------------------------------
	Preprocessor Rule Disabled - C
---------------------------------------------->
		<key>preprocessor-rule-disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0)\b).*</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b)</string>
					<key>name</key>
					<string>comment.block.preprocessor.if-branch</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
<!-------------------------------------------
	Preprocessor Rule Enabled - C
---------------------------------------------->
		<key>preprocessor-rule-enabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0*1)\b)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b).*</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.c</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>comment.block.preprocessor.else-branch</string>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
<!-------------------------------------------
	Preprocessor Rule Other - C
---------------------------------------------->
		<key>preprocessor-rule-other</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
<!----------------------------------------------------------------------------
	C/C++ Native Features - End
----------------------------------------------------------------------------->		</dict>
	<key>scopeName</key>
	<string>source.c++</string>
	<key>uuid</key>
	<string>ce8002f6-c6df-4827-a6c4-baddfa5d9590</string>
</dict>
</plist>
